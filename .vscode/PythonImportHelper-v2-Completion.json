[
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Separator",
        "importPath": "tkinter.ttk",
        "description": "tkinter.ttk",
        "isExtraImport": true,
        "detail": "tkinter.ttk",
        "documentation": {}
    },
    {
        "label": "solve_sudoku",
        "kind": 2,
        "importPath": "sudoku_solver",
        "description": "sudoku_solver",
        "peekOfCode": "def solve_sudoku():\n    for i in range(9):\n        for j in range(9):\n            value = entries[i][j].get()\n            if value.isdigit():\n                board[i][j] = int(value)\n            else:\n                board[i][j] = 0\n    if solve():\n        for i in range(9):",
        "detail": "sudoku_solver",
        "documentation": {}
    },
    {
        "label": "solve",
        "kind": 2,
        "importPath": "sudoku_solver",
        "description": "sudoku_solver",
        "peekOfCode": "def solve():\n    empty_cell = find_empty_cell()\n    if empty_cell is None:\n        return True\n    row, col = empty_cell\n    for digit in range(1, 10):\n        if is_valid(row, col, digit):\n            board[row][col] = digit\n            # Recursively solve the Sudoku\n            if solve():",
        "detail": "sudoku_solver",
        "documentation": {}
    },
    {
        "label": "find_empty_cell",
        "kind": 2,
        "importPath": "sudoku_solver",
        "description": "sudoku_solver",
        "peekOfCode": "def find_empty_cell():\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                return i, j\n    return None\ndef is_valid(row, col, digit):\n    for i in range(9):\n        if board[row][i] == digit or board[i][col] == digit:\n            return False",
        "detail": "sudoku_solver",
        "documentation": {}
    },
    {
        "label": "is_valid",
        "kind": 2,
        "importPath": "sudoku_solver",
        "description": "sudoku_solver",
        "peekOfCode": "def is_valid(row, col, digit):\n    for i in range(9):\n        if board[row][i] == digit or board[i][col] == digit:\n            return False\n    box_start_row = (row // 3) * 3\n    box_start_col = (col // 3) * 3\n    for i in range(3):\n        for j in range(3):\n            if board[box_start_row + i][box_start_col + j] == digit:\n                return False",
        "detail": "sudoku_solver",
        "documentation": {}
    },
    {
        "label": "clear_board",
        "kind": 2,
        "importPath": "sudoku_solver",
        "description": "sudoku_solver",
        "peekOfCode": "def clear_board():\n    for i in range(9):\n        for j in range(9):\n            entries[i][j].delete(0, tk.END)\n            entries[i][j].insert(tk.END, \"\")\n            board[i][j] = 0\nsolve_button = tk.Button(\n    root, text=\"Solve\", command=solve_sudoku, font=(\"Arial\", 16), padx=10)\nsolve_button.grid(row=9, column=0, columnspan=4, pady=10)\nclear_button = tk.Button(",
        "detail": "sudoku_solver",
        "documentation": {}
    },
    {
        "label": "board",
        "kind": 5,
        "importPath": "sudoku_solver",
        "description": "sudoku_solver",
        "peekOfCode": "board = [[0] * 9 for _ in range(9)]\nroot = tk.Tk()\nroot.title(\"Sudoku Solver\")\nentries = []\nfor i in range(9):\n    row_entries = []\n    for j in range(9):\n        entry = tk.Entry(root, width=3, font=(\"Arial\", 30), justify=\"center\")\n        entry.grid(row=i, column=j, padx=1, pady=1, rowspan=1, columnspan=1)\n        entry.config(fg=\"black\")",
        "detail": "sudoku_solver",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "sudoku_solver",
        "description": "sudoku_solver",
        "peekOfCode": "root = tk.Tk()\nroot.title(\"Sudoku Solver\")\nentries = []\nfor i in range(9):\n    row_entries = []\n    for j in range(9):\n        entry = tk.Entry(root, width=3, font=(\"Arial\", 30), justify=\"center\")\n        entry.grid(row=i, column=j, padx=1, pady=1, rowspan=1, columnspan=1)\n        entry.config(fg=\"black\")\n        row_entries.append(entry)",
        "detail": "sudoku_solver",
        "documentation": {}
    },
    {
        "label": "entries",
        "kind": 5,
        "importPath": "sudoku_solver",
        "description": "sudoku_solver",
        "peekOfCode": "entries = []\nfor i in range(9):\n    row_entries = []\n    for j in range(9):\n        entry = tk.Entry(root, width=3, font=(\"Arial\", 30), justify=\"center\")\n        entry.grid(row=i, column=j, padx=1, pady=1, rowspan=1, columnspan=1)\n        entry.config(fg=\"black\")\n        row_entries.append(entry)\n    entries.append(row_entries)\ndef solve_sudoku():",
        "detail": "sudoku_solver",
        "documentation": {}
    },
    {
        "label": "solve_button",
        "kind": 5,
        "importPath": "sudoku_solver",
        "description": "sudoku_solver",
        "peekOfCode": "solve_button = tk.Button(\n    root, text=\"Solve\", command=solve_sudoku, font=(\"Arial\", 16), padx=10)\nsolve_button.grid(row=9, column=0, columnspan=4, pady=10)\nclear_button = tk.Button(\n    root, text=\"Clear\", command=clear_board, font=(\"Arial\", 16), padx=10)\nclear_button.grid(row=9, column=5, columnspan=4, pady=10)\nroot.mainloop()",
        "detail": "sudoku_solver",
        "documentation": {}
    },
    {
        "label": "clear_button",
        "kind": 5,
        "importPath": "sudoku_solver",
        "description": "sudoku_solver",
        "peekOfCode": "clear_button = tk.Button(\n    root, text=\"Clear\", command=clear_board, font=(\"Arial\", 16), padx=10)\nclear_button.grid(row=9, column=5, columnspan=4, pady=10)\nroot.mainloop()",
        "detail": "sudoku_solver",
        "documentation": {}
    }
]